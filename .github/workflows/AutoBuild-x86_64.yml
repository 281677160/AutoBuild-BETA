###########################################################
#   Description: Compile OpenWrt by GitHub Actions        #
#   Based on: https://github.com/P3TERX/Actions-OpenWrt   #
#   Author: Hyy2001X                                      #
###########################################################

name: x86_64

on:
  repository_dispatch:
  push:
    branches:
      - main
    paths:
      - 'router-config/lede-master/come-back/start'
  
  workflow_dispatch:
    inputs:
      DEFAULT_SOURCE:
        description: '编译源码'
        required: false
        default: '大雕-lede'
        type: choice
        options:
          - '大雕-lede'
          - '天灵-21.02'
          - '天灵-18.06-k5.4'
          - '天灵-18.06'
          - '天灵-master'
          - 'Lienol-21.02'
          - 'Lienol-19.07'
          - 'Lienol-master'
          - '官方-22.03'
          - '官方-21.02'
          - '官方-19.07'
          - '官方-master'
      Tempoary_CONFIG:
        description: '配置文件'
        required: false
        default: 'x86_64'
        type: choice
        options:
          - 'x86_64'
          - 'x86_64-AP'
          - '自定1'
          - '自定2'
      Tempoary_FLAG:
        description: '固件标签'
        default: '高大全(Full)'
        type: choice
        options:
          - '高大全(Full)'
          - '精简版(Simplify)'
          - '养老版(Ultrathin)'
      Tempoary_IP:
        description: '固件IP地址 [选填]'
        default: ''
      UPLOAD_RELEASES:
        description: '上传固件到 Github Releases'
        required: false
        default: 'true'
        type: boolean
      UPLOAD_ARTIFACTS:
        description: '上传固件到 Github Artifacts'
        required: false
        default: 'false'
        type: boolean
      CACHE_ACCELERATE:
        description: 'Cache 加速编译'
        required: false
        default: 'true'
        type: boolean
      DELETE_USELESS_FILES:
        description: '删除无用文件以增加编译空间'
        required: false
        default: 'true'
        type: boolean
      DELETE_OLD_WORKFLOW:
        description: '删除3天之前的所有Actions任务'
        required: false
        default: 'false'
        type: boolean
      DELETE_OLD_RELEASES:
        description: '删除所有RELEASES(发布)'
        required: false
        default: 'false'
        type: boolean
        
  schedule:
  - cron: 15 8 * * *
  
env:
# 上传 bin 文件夹到 Github Artifacts
  UPLOAD_BIN_ARTIFACTS: false
  COME_BACK: Comeback/x86_64

jobs:
  Compile:
    runs-on: ubuntu-22.04
    permissions:
      issues: write
      pull-requests: write
      contents: write

    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 0

    - name: Load Custom Variables
      run: |
        if [[ "${{ github.event.inputs.DEFAULT_SOURCE }}" == '大雕-lede' ]]; then
          echo "REPO_URL=https://github.com/coolsnowwolf/lede" >> $GITHUB_ENV
          echo "REPO_BRANCH=master" >> $GITHUB_ENV
          echo "WORK_DIR=DD180686" >> $GITHUB_ENV
        elif [[ "${{ github.event.inputs.DEFAULT_SOURCE }}" == '天灵-21.02' ]]; then
          echo "REPO_URL=https://github.com/immortalwrt/immortalwrt" >> $GITHUB_ENV
          echo "REPO_BRANCH=openwrt-21.02" >> $GITHUB_ENV
          echo "WORK_DIR=TL210286" >> $GITHUB_ENV
        elif [[ "${{ github.event.inputs.DEFAULT_SOURCE }}" == '天灵-18.06-k5.4' ]]; then
          echo "REPO_URL=https://github.com/immortalwrt/immortalwrt" >> $GITHUB_ENV
          echo "REPO_BRANCH=openwrt-18.06-k5.4" >> $GITHUB_ENV
          echo "WORK_DIR=TL1806K86" >> $GITHUB_ENV
        elif [[ "${{ github.event.inputs.DEFAULT_SOURCE }}" == '天灵-18.06' ]]; then
          echo "REPO_URL=https://github.com/immortalwrt/immortalwrt" >> $GITHUB_ENV
          echo "REPO_BRANCH=openwrt-18.06" >> $GITHUB_ENV
          echo "WORK_DIR=TL180686" >> $GITHUB_ENV
        elif [[ "${{ github.event.inputs.DEFAULT_SOURCE }}" == '天灵-master' ]]; then
          echo "REPO_URL=https://github.com/immortalwrt/immortalwrt" >> $GITHUB_ENV
          echo "REPO_BRANCH=master" >> $GITHUB_ENV
          echo "WORK_DIR=TLMASTER86" >> $GITHUB_ENV
        elif [[ "${{ github.event.inputs.DEFAULT_SOURCE }}" == 'Lienol-21.02' ]]; then
          echo "REPO_URL=https://github.com/Lienol/openwrt" >> $GITHUB_ENV
          echo "REPO_BRANCH=21.02" >> $GITHUB_ENV
          echo "WORK_DIR=LI210286" >> $GITHUB_ENV
        elif [[ "${{ github.event.inputs.DEFAULT_SOURCE }}" == 'Lienol-19.07' ]]; then
          echo "REPO_URL=https://github.com/Lienol/openwrt" >> $GITHUB_ENV
          echo "REPO_BRANCH=19.07" >> $GITHUB_ENV
          echo "WORK_DIR=LI190786" >> $GITHUB_ENV
        elif [[ "${{ github.event.inputs.DEFAULT_SOURCE }}" == 'Lienol-master' ]]; then
          echo "REPO_URL=https://github.com/Lienol/openwrt" >> $GITHUB_ENV
          echo "REPO_BRANCH=master" >> $GITHUB_ENV
          echo "WORK_DIR=LIMASTER86" >> $GITHUB_ENV
        elif [[ "${{ github.event.inputs.DEFAULT_SOURCE }}" == '官方-22.03' ]]; then
          echo "REPO_URL=https://github.com/openwrt/openwrt" >> $GITHUB_ENV
          echo "REPO_BRANCH=openwrt-22.03" >> $GITHUB_ENV
          echo "WORK_DIR=GF220386" >> $GITHUB_ENV
        elif [[ "${{ github.event.inputs.DEFAULT_SOURCE }}" == '官方-21.02' ]]; then
          echo "REPO_URL=https://github.com/openwrt/openwrt" >> $GITHUB_ENV
          echo "REPO_BRANCH=openwrt-21.02" >> $GITHUB_ENV
          echo "WORK_DIR=GF210286" >> $GITHUB_ENV
        elif [[ "${{ github.event.inputs.DEFAULT_SOURCE }}" == '官方-19.07' ]]; then
          echo "REPO_URL=https://github.com/openwrt/openwrt" >> $GITHUB_ENV
          echo "REPO_BRANCH=openwrt-19.07" >> $GITHUB_ENV
          echo "WORK_DIR=GF190786" >> $GITHUB_ENV
        elif [[ "${{ github.event.inputs.DEFAULT_SOURCE }}" == '官方-master' ]]; then
          echo "REPO_URL=https://github.com/openwrt/openwrt" >> $GITHUB_ENV
          echo "REPO_BRANCH=master" >> $GITHUB_ENV
          echo "WORK_DIR=GFMASTER86" >> $GITHUB_ENV
        fi
        
        if [[ "${{ github.event.inputs.Tempoary_FLAG }}" == '高大全(Full)' ]]; then
          echo "Tempoary_FLAG=Full" >> $GITHUB_ENV
        elif [[ "${{ github.event.inputs.Tempoary_FLAG }}" == '精简版(Simplify)' ]]; then
          echo "Tempoary_FLAG=Simplify" >> $GITHUB_ENV
        elif [[ "${{ github.event.inputs.Tempoary_FLAG }}" == '养老版(Ultrathin)' ]]; then
          echo "Tempoary_FLAG=Ultrathin" >> $GITHUB_ENV
        fi
        
        if [[ -n "${{ github.event.inputs.Tempoary_IP }}" ]]; then
          echo "Tempoary_IP=${{ github.event.inputs.Tempoary_IP }}" >> $GITHUB_ENV
        fi
        
        echo "CONFIG_FILE=${{ github.event.inputs.Tempoary_CONFIG }}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASES=${{ github.event.inputs.UPLOAD_RELEASES }}" >> $GITHUB_ENV
        echo "UPLOAD_ARTIFACTS=${{ github.event.inputs.UPLOAD_ARTIFACTS }}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_ARTIFACTS=${{ github.event.inputs.UPLOAD_BIN_ARTIFACTS }}" >> $GITHUB_ENV
        echo "DELETE_USELESS_FILES=${{ github.event.inputs.DELETE_USELESS_FILES }}" >> $GITHUB_ENV
        echo "DELETE_OLD_WORKFLOW=${{ github.event.inputs.DELETE_OLD_WORKFLOW }}" >> $GITHUB_ENV
        echo "DELETE_OLD_RELEASES=${{ github.event.inputs.DELETE_OLD_RELEASES }}" >> $GITHUB_ENV
        echo "CACHE_ACCELERATE=${{ github.event.inputs.CACHE_ACCELERATE }}" >> $GITHUB_ENV
        
        
        
        echo "Compile_Date=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
        echo "Display_Date=$(date +%Y/%m/%d)" >> $GITHUB_ENV
        
        if [[ -z "${{ github.event.inputs.DEFAULT_SOURCE }}" ]]; then
          echo "TIMED_TRIGGER=true" >> $GITHUB_ENV
        fi
        
        ### 控制部分结束 ( 以上内容请保持不变,除非您知道您在干什么 )

    - name: 以下为定时触发编译手动修改配置
      if: env.TIMED_TRIGGER == 'true'
      env:
        # 源码仓库链接
        REPO_URL: https://github.com/coolsnowwolf/lede
        # 源码仓库分支
        REPO_BRANCH: master
        # 配置文件名称
        CONFIG_FILE: x86_64
        # 固件标签
        Tempoary_FLAG: Full
        # 固件IP（openwrt后台地址）
        Tempoary_IP: 192.168.1.1
        # 上传固件到 releasea
        UPLOAD_RELEASES: true
        # 上传固件到 Github Artifacts
        UPLOAD_ARTIFACTS: false
        # 上传 bin 文件夹到 Github Artifacts
        UPLOAD_BIN_ARTIFACTS: false
        # 删除无用文件以增加编译空间
        DELETE_USELESS_FILES: true
        # 删除3天之前的所有Actions任务
        DELETE_OLD_WORKFLOW: false
        # 删除所有RELEASES(发布)
        DELETE_OLD_RELEASES: false
        # Cache 加速编译
        CACHE_ACCELERATE: true
      run: |
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "Tempoary_FLAG=${Tempoary_FLAG}" >> $GITHUB_ENV
        echo "Tempoary_IP=${Tempoary_IP}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASES=${UPLOAD_RELEASES}" >> $GITHUB_ENV
        echo "UPLOAD_ARTIFACTS=${UPLOAD_ARTIFACTS}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_ARTIFACTS=${UPLOAD_BIN_ARTIFACTS}" >> $GITHUB_ENV
        echo "DELETE_USELESS_FILES=${DELETE_USELESS_FILES}" >> $GITHUB_ENV
        echo "DELETE_OLD_WORKFLOW=${DELETE_OLD_WORKFLOW}" >> $GITHUB_ENV
        echo "DELETE_OLD_RELEASES=${DELETE_OLD_RELEASES}" >> $GITHUB_ENV
        echo "CACHE_ACCELERATE=${CACHE_ACCELERATE}" >> $GITHUB_ENV
        echo "WORK_DIR=workdir" >> $GITHUB_ENV

    - name: Initialize Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update -y
        sudo -E apt-get -qq install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
        git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
        libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
        mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils \
        rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /usr/lib/jvm /opt/ghc /swapfile
        if [[ "${{ github.event.inputs.DELETE_USELESS_FILES }}" == 'true' ]]; then
          echo "正在删除无用东西"
          docker rmi `docker images -q`
          sudo -E apt-get -qq remove -y --purge azure-cli ghc* zulu* llvm* firefox google* powershell openjdk* msodbcsql17 mongodb* moby* snapd* mysql*
        fi
        sudo -E apt-get -qq -y autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "Asia/Shanghai"
        sudo mkdir -p /${{ env.WORK_DIR }}
        sudo chown $USER:$GROUPS /${{ env.WORK_DIR }}
        
    - name: CPU检测
      run: |
        cd ${GITHUB_WORKSPACE}
        export cpu_model=`cat /proc/cpuinfo  |grep 'model name' |gawk -F : '{print $2}' | uniq -c  | sed 's/^ \+[0-9]\+ //g'`
        echo "当前CPU型号：${cpu_model}"
        if [[ `echo "${cpu_model}" |grep -Eoc "E5"` -eq '1' ]]; then
          git clone -b main https://github.com/${{github.repository}}.git lede
          export yml_path="lede/.github/workflows/AutoBuild-x86_64.yml"
          export PATHS1="$(grep -Eo "\- '.*'" "${yml_path}" |sed 's/^[ ]*//g' |grep -v "^#" |awk 'NR==1')"
          export PATHS2="- '${COME_BACK}/start'"
          if [[ -n ${PATHS1} ]] && [[ -n ${PATHS2} ]]; then
            sed -i "s?${PATHS1}?${PATHS2}?g" "${yml_path}"
          else
            echo "获取变量失败,请勿胡乱修改AutoBuild-x86_64.yml文件"
            exit 1
          fi
          cd lede
          mkdir -p ${COME_BACK}
          echo "$(date +%Y%m%d%H%M%S)" > ${COME_BACK}/start
          git add .
          git commit -m "Skip_E5 ${{ env.CONFIG_FILE }}"
          git push --force "https://${{ secrets.GH_TOKEN }}@github.com/${{github.repository}}" HEAD:main
          exit 1
        fi

    - name: Clone Openwrt Source Code
      working-directory: /${{ env.WORK_DIR }}
      run: |
        git clone -b $REPO_BRANCH $REPO_URL openwrt
        ln -sf /${{ env.WORK_DIR }}/openwrt $GITHUB_WORKSPACE/openwrt
        cd $GITHUB_WORKSPACE/openwrt
        ./scripts/feeds update -a

    - name: Run Diy Scripts
      run: |
        echo "Free space:"
        df -h
        chmod +x Scripts/AutoBuild_*.sh
        cd openwrt
        source $GITHUB_WORKSPACE/Scripts/AutoBuild_DiyScript.sh
        
        cd $GITHUB_WORKSPACE/openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a > /dev/null 2>&1
        ./scripts/feeds install -a
        rm -f .config && cp $GITHUB_WORKSPACE/Configs/$CONFIG_FILE .config
        if [ "${{ env.CACHE_ACCELERATE }}" == true ]
        then
            echo -e "\nCONFIG_DEVEL=y\nCONFIG_CCACHE=y\n" >> $GITHUB_WORKSPACE/openwrt/.config
        fi
        
        make defconfig
        source $GITHUB_WORKSPACE/Scripts/AutoBuild_Function.sh
        Firmware_Diy_Before
        Firmware_Diy_Main
        Firmware_Diy
        Firmware_Diy_Other
        
    - name: Accelerate
      if: github.event.inputs.CACHE_ACCELERATE == 'true'
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: 'x86'
        prefix: ${{ github.workspace }}/openwrt

    - name: Pre-download Libraries
      run: |
        cd openwrt
        make defconfig
        make download -j8

    - name: Build OpenWrt
      id: compile
      run: |
        cd openwrt
        make -j$(nproc) || make -j1 V=s

    - name: Checkout Firmware
      if: steps.compile.outcome == 'success' && !cancelled()
      run: |
        cd openwrt
        source $GITHUB_WORKSPACE/Scripts/AutoBuild_Function.sh
        Firmware_Diy_End

    - name: Upload Firmware to Artifacts
      uses: actions/upload-artifact@main
      if: env.UPLOAD_ARTIFACTS == 'true' && steps.compile.outcome == 'success' && !cancelled()
      with:
        name: ${{ env.CONFIG_FILE }}_firmware_${{ env.Compile_Date }}
        path: openwrt/bin/Firmware

    - name: Upload bin to Artifacts
      uses: actions/upload-artifact@main
      if: env.UPLOAD_BIN_ARTIFACTS == 'true' && steps.compile.outcome == 'success' && !cancelled()
      with:
        name: ${{ env.CONFIG_FILE }}_bin_${{ env.Compile_Date }}
        path: openwrt/bin

    - name: Upload Firmware to Release
      if: env.UPLOAD_RELEASES == 'true' && steps.compile.outcome == 'success' && !cancelled()
      uses: ncipollo/release-action@main
      with:
        name: AutoUpdate
        tag: AutoUpdate
        token: ${{ secrets.REPO_TOKEN }}
        artifacts: openwrt/bin/Firmware/*
        allowUpdates: true
        
    - name: Download Github API
      if: env.UPLOAD_RELEASES == 'true' && steps.compile.outcome == 'success' && !cancelled()
      run: |
        wget https://api.github.com/repos/${{github.repository}}/releases/tags/AutoUpdate -O API

    - name: Upload API to Github Release 
      if: env.UPLOAD_RELEASES == 'true' && steps.compile.outcome == 'success' && !cancelled()
      uses: ncipollo/release-action@main
      with:
        name: AutoUpdate
        tag: AutoUpdate
        token: ${{ secrets.REPO_TOKEN }}
        artifacts: ./API
        allowUpdates: true
        
    - name: delete older releases
      if: env.DELETE_OLD_RELEASES == 'true' && !cancelled()
      uses: danshui-git/delete-older-releases@main
      with:
        repo: ${{ github.repository }}
        keep_latest: 0
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}

    - name: Delete old Workflow Runs
      continue-on-error: true
      if: env.DELETE_OLD_WORKFLOW == 'true' && !cancelled()
      uses: Mattraks/delete-workflow-runs@v2
      with:
          token: ${{ secrets.REPO_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 3
          keep_minimum_runs: 0
