###########################################################
#   Description: Compile OpenWrt by GitHub Actions        #
#   Based on: https://github.com/P3TERX/Actions-OpenWrt   #
#   Author: Hyy2001X                                      #
###########################################################

name: x86_64

### 以下内容请保持不变 ( 请修改下方的 [环境变量设置] )
on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      Tempoary_IP:
        description: '固件 IP 地址 [可选]'
        default: ''
      DEFAULT_SOURCE:
        description: '编译源码'
        required: false
        default: 'coolsnowwolf/lede:master'
        type: choice
        options:
          - 'coolsnowwolf/lede:master'
          - 'immortalwrt/immortalwrt:openwrt-21.02'
          - 'openwrt/openwrt:openwrt-22.03'
      Tempoary_CONFIG:
        description: '配置文件'
        required: false
        default: 'x86_64'
        type: choice
        options:
          - 'x86_64'
          - 'x86_64-AP'
      Tempoary_FLAG:
        description: '固件标签'
        default: 'Full'
        type: choice
        options:
          - 'Full'
          - 'AP'
      UPLOAD_RELEASES:
        description: '上传固件到 Github Releases'
        required: false
        default: 'true'
        type: boolean
      UPLOAD_ARTIFACTS:
        description: '上传固件到 Github Artifacts'
        required: false
        default: 'false'
        type: boolean
      UPLOAD_BIN_ARTIFACTS:
        description: '上传 bin 文件夹到 Github Artifacts'
        required: false
        default: 'false'
        type: boolean
      CACHE_ACCELERATE:
        description: 'Cache 加速编译'
        required: false
        default: 'false'
        type: boolean
      DELETE_USELESS_FILES:
        description: '删除无用文件以增加编译空间'
        required: false
        default: 'true'
        type: boolean
      DELETE_OLD_WORKFLOW:
        description: '删除早期的 workflow 任务'
        required: false
        default: 'false'
        type: boolean
          
          
### 控制部分结束 ( 以上内容请保持不变 )

  #push:
  #  branches: 
  #    - master

  #schedule:
  #  - cron: 0 8 * * 5

  #watch:
  #  types: [started]

jobs:
  Compile:
    runs-on: ubuntu-20.04
    permissions:
      issues: write
      pull-requests: write
      contents: write

    steps:
    - name: Maximize Build Space
      if: env.DELETE_USELESS_FILES == 'true' && !cancelled()
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 5120
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'

    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 0

    - name: Load Custom Variables
      run: |
        if [ -n "${{ github.event.inputs.Tempoary_CONFIG }}" ]
        then
            if [ -f "$GITHUB_WORKSPACE/Configs/${{ github.event.inputs.Tempoary_CONFIG }}" ]
            then
                CONFIG_FILE=${{ github.event.inputs.Tempoary_CONFIG }}
            else
                CONFIG_FILE=${{ env.CONFIG_FILE }}
            fi
        else
            CONFIG_FILE=${{ env.CONFIG_FILE }}
        fi
        if [ ! -f "$GITHUB_WORKSPACE/Configs/$CONFIG_FILE" ]
        then
            echo "CONFIG_FILE: [/Config/$CONFIG_FILE] is not detected ..."
            exit 1
        else
            echo "CONFIG_FILE: [/Config/$CONFIG_FILE]"
            echo "CONFIG_FILE=$CONFIG_FILE" >> $GITHUB_ENV
        fi
        if [ -n "${{ github.event.inputs.Tempoary_IP }}" ]
        then
            echo "IP: [${{ github.event.inputs.Tempoary_IP }}]"
            echo "Tempoary_IP=${{ github.event.inputs.Tempoary_IP }}" >> $GITHUB_ENV
        fi
        if [ -n "${{ github.event.inputs.Tempoary_FLAG }}" ]
        then
            echo "FLAG: [${{ github.event.inputs.Tempoary_FLAG }}]"
            echo "Tempoary_FLAG=${{ github.event.inputs.Tempoary_FLAG }}" >> $GITHUB_ENV
        fi
        REPO_URL="https://github.com/$(cut -d \: -f 1 <<< ${{ github.event.inputs.DEFAULT_SOURCE }})"
        REPO_BRANCH=$(cut -d \: -f 2 <<< ${{ github.event.inputs.DEFAULT_SOURCE }})
        echo "REPO_URL=$REPO_URL" >> $GITHUB_ENV
        echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV
        echo "Compile_Date=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV
        echo "Display_Date=$(date +%Y/%m/%d)" >> $GITHUB_ENV

    - name: Initialize Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get update
        sudo -E apt-get -y install busybox build-essential cmake asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python2.7 python3 python3-pip python3-ply haveged lrzsz device-tree-compiler scons antlr3 gperf intltool mkisofs rsync
        sudo timedatectl set-timezone "Asia/Shanghai"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        if [ "${{ github.event.inputs.DELETE_USELESS_FILES }}" == true ]
        then
            docker rmi $(docker images -q)
            sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php
            sudo -E apt-get -y autoremove --purge
            sudo -E apt-get clean
        fi

    - name: Clone Openwrt Source Code
      run: |
        git clone -b $REPO_BRANCH $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Accelerate
      if: ${{ github.event.inputs.CACHE_ACCELERATE }} == 'true'
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: false
        toolchain: true
        skip: true
        clean: true
        prefix: ${{ github.workspace }}/openwrt

    - name: Run Diy Scripts
      run: |
        echo "Free space:"
        df -h
        chmod +x Scripts/AutoBuild_*.sh
        cd openwrt
        if [ "${{ github.event.inputs.CACHE_ACCELERATE }}" == true ]
        then
            echo -e "\nCONFIG_DEVEL=y\nCONFIG_CCACHE=y\n" >> $GITHUB_WORKSPACE/Configs/$CONFIG_FILE
        fi
        cp $GITHUB_WORKSPACE/Configs/$CONFIG_FILE .config
        source $GITHUB_WORKSPACE/Scripts/AutoBuild_DiyScript.sh
        source $GITHUB_WORKSPACE/Scripts/AutoBuild_Function.sh
        make defconfig
        Firmware_Diy_Before
        rm -f .config && cp $GITHUB_WORKSPACE/Configs/$CONFIG_FILE .config
        Firmware_Diy_Main
        Firmware_Diy
        Firmware_Diy_Other

    - name: Pre-download Libraries
      run: |
        cd openwrt
        ./scripts/feeds install -a
        make defconfig
        make download -j8

    - name: Build OpenWrt
      id: compile
      run: |
        cd openwrt
        make -j4 || make -j1 V=s

    - name: Checkout Firmware
      if: ${{steps.compile.outcome}} == 'success' && !cancelled()
      run: |
        cd openwrt
        source $GITHUB_WORKSPACE/Scripts/AutoBuild_Function.sh
        Firmware_Diy_End

    - name: Upload Firmware to Artifacts
      uses: actions/upload-artifact@main
      if: ${{ github.event.inputs.UPLOAD_ARTIFACTS }} == 'true' && ${{steps.compile.outcome}} == 'success' && !cancelled()
      with:
        name: ${{ env.CONFIG_FILE }}_firmware_${{ env.Compile_Date }}
        path: openwrt/bin/Firmware

    - name: Upload bin to Artifacts
      uses: actions/upload-artifact@main
      if: ${{ github.event.inputs.UPLOAD_BIN_ARTIFACTS }} == 'true' && ${{steps.compile.outcome}} == 'success' && !cancelled()
      with:
        name: ${{ env.CONFIG_FILE }}_bin_${{ env.Compile_Date }}
        path: openwrt/bin

    - name: Upload Firmware to Release
      if: ${{ github.event.inputs.UPLOAD_RELEASES }} == 'true' && ${{steps.compile.outcome}} == 'success' && !cancelled()
      uses: ncipollo/release-action@main
      with:
        name: AutoUpdate
        tag: AutoUpdate
        token: ${{ secrets.REPO_TOKEN }}
        artifacts: openwrt/bin/Firmware/*
        allowUpdates: true
        
    - name: Download Github API
      if: ${{ github.event.inputs.UPLOAD_RELEASES }} == 'true' && ${{steps.compile.outcome}} == 'success' && !cancelled()
      run: |
        wget https://api.github.com/repos/${{github.repository}}/releases/tags/AutoUpdate -O API

    - name: Upload API to Github Release 
      if: ${{ github.event.inputs.UPLOAD_RELEASES }} == 'true' && ${{steps.compile.outcome}} == 'success' && !cancelled()
      uses: ncipollo/release-action@main
      with:
        name: AutoUpdate
        tag: AutoUpdate
        token: ${{ secrets.REPO_TOKEN }}
        artifacts: ./API
        allowUpdates: true

    - name: Delete old Workflow Runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
          token: ${{ secrets.REPO_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 3
